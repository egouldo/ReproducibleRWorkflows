---
title: "Module 1: Organising Projects for Reproduicbility"
author: "Elliot Gould"
format: 
  revealjs:
    width: 1920
    height: 1080
    slide-number: true
    theme: simple
    highlight: pygments
    touch: false
    controls: true
bibliography: ../assets/references.bib
---

# Setting up your project: preparing the scaffolding for a research compendium

**Planning & Preparation**

-   [ ] Choose a project folder structure
-   [ ] Choose File Naming Structure
-   [ ] Choose Coding Style
-   [ ] Install & Set Up Version Control System Software
-   [ ] Set up Online Version Control System

# Setting up your project directory

::: {.r-stack .incremental}
::: {.fragment .fade-in-then-out}
![](images/Screenshot%202023-05-17%20at%205.34.14%20pm.png){width="500px"}
:::

::: {.fragment .fade-in-then-out}
![](images/Screenshot%202023-05-17%20at%205.35.52%20pm.png){width="500px"}
:::

::: {.fragment .fade-in-then-out}
![](images/Screenshot%202023-05-17%20at%205.36.21%20pm.png){width="500px"}
:::
:::

::: footer
[@Marwick2018]
:::

::: notes
-   Putting thought into the scaffolding of your project directory is very important for reducing the risk of mistakes and for minimising head-aches down the track as your project matures.
-   It also will facilitate you to share your data and code openly in a format that others can easily understand
-   A good project directory scaffolding has a well-defined folder system, clear rules about what type of file goes where, and how those files get there. Importantly, a good project directory layout will facilitate the use of good workflows, ensuring the integrity of your analyses.
-   There are many ways for you to layout your folders, and the optimal layout will depend on the size and type of project as well as personal preferences, your research compendium can grow extremely large and complicated very quickly!
-   Today we will focus on the most simple of project structures, and discuss principles for setting up
:::

## Components and structure of a simple scaffolding

```         
your_project/
├── R/
├── data/
├── doc/
├── figs/
├── output/
└──  analysis.R
```

::: incremental
- `R/` Contains functions or re-usable chunks of code, each defined in their own R script.
- `data/` Contains the raw dataset used in your analyses. Usually csv or text files, but could be in some other format, such as a database.
- `doc/` Contains your paper, thesis, or other main document that your analyses will be used in. Using RMarkdown files is a good idea, so you can load your figures directly from `./fig/`, rather than copying and pasting. If you like to do exploratory analyses, or investigations before proceeding with the main analysis, you could add two further sub-directories: `./doc/man/` for the main manuscript, and `./doc/inst/` for your investigations. You can move mature sections from the investigations folder to your main manuscript in the `/man/` folder when you are ready.
- `figs/` This folder contains your figures. Only generated files go here. I.e. files that are generated by your code written within your analysis script(s).
- `output/` Any other non-figure files that are generated by your code should be saved here. These will often be processed versions of your raw dataset (i.e. the cleaned dataset, or specific versions of the dataset shaped for particular analyses), or simulated data.
- `analysis.R` Your code driving the entire analysis should be stored here. As your project expands you might find it useful to divide your file up into numbered analysis files. Each file or script should complete one or a few tasks [@Gandrud:2016ux].
:::

::: notes
The scaffolding we will use today looks like this, this is a good place to start
:::

## Components and structure of a simple scaffolding


```         
your_project/
├── R/
├── data/
├── doc/
├── figs/
├── output/
├── analysis.R
├── .gitignore
├── DESCRIPTION
├── README.md
└── your_project.Rproj
```

:::incremental
- `your_project.Rproj` - machine-readable file that sets the working directory, amongst other project options. Never, ever, work without an Rproject file!
- `README.md` - describes the overall project, and how a new user of your code can get started.
- `DESCRIPTION` - human- and machine-readable file, contains information about the author, license, software dependencies and metadata. Required for turning your compendium into an R package.
- `.gitignore file`: autogenerated file that tells your version control software what to ignore, we will get to this a bit later!
:::

::: notes
A few more important files!
:::


## Principles underpinning this scaffolding:

*1. Keep your data as raw & unprocessed as possible, and read-only*

- keep your data 'as raw as possible' by treating the original data file(s) as read-only. 
- DO NOT EDIT YOUR DATA FILES BY HAND OR WITH EXCEL 
- modifications to your data occur within R, are transparent and well-documented
- Modifications should not be saved over the original 'raw' file. Any 'derived' data files should be saved as a separate file. Appending the file names for a given dataset with `_raw` and `_processed`, is a good way of differentiating between these two different versions of the data.

::: notes
**Raw Data**
A research compendium should maintain a clear separation of data, method, and output, while unambiguously expressing the relationship between those three. In practice, this means data files must be separate from code files. This is important to let others easily identify how the original researcher operated on the data to generate the results. Keeping data and method separate treats the data as “read-only,” so that the original data are untouched and all modifications are transparently documented in the code. 
- Lots of effort and money go into collecting data. Therefore it's important that we interact with them in such a way that maintains the integrity of the data. 
- This allows for the data to be re-used by others, perhaps for meta-analyses or for longitudinal studies. Importantly, it will also ensure the integrity of your own analyses and your project, reducing the risk of any irrecoverable, and even unnoticed, errors to your raw data.
:::

## Principles underpinning this scaffolding:

*2. Treat generated output as disposable*

- Just rerun your code to regenerate
- your version control system is in charge of watching over different versions
- Any files generated by your analysis should go into the `./figs/` or the `./output/` directory. The former containing any figures generated by your code, and the latter containing any type of output files, including simulation outputs, or processed datasets, i.e. those data files ending in `_processed`. 

::: notes
The output files should be considered as disposable, with a mindset that one can always easily regenerate the output using the code and data.
:::

## Principles underpinning this scaffolding:

*3. DRY & Define your functions separately from their application*

- DRY: Do not Repeat Yourself. 
- Any chunk of code that you re-use more than twice should go into its own script, and turned into a function. These should be saved, a function per file, in the `./R/` folder. The function should be well-documented, including its aim and any other relevent information about usage.
- Any time you wish to *apply* a function defined in your `./R/` folder, it should be loaded using `source()`, and saved into your analysis script, in the example scaffolding above, `analysis.R`.

::: notes

:::


## Principles underpinning this scaffolding:

*4. The relationship between which code operates on which data in which order to produce which outputs must be specified*


::: notes

:::


------------------------------------------------------------------------

# Create a new Github repository

But first set up a repository on github for version control:

1.  Login to github.com and create a new repository
2.  In the create new repository screen, give your repository the name: VicBioCon17
3.  Give a description of your choosing
4.  keep it public
5.  Initialize this repository with a README
6.  Add a license: select MIT
7.  click on create the repository (short: repo)

-   Click on the green button "Clone or Download":
-   clone with HTTPS: Click the clipboard button to copy the URL.

Your repository is created:

-   Note that all files are listed, we have two files at the moment.
-   the README page is 'rendered' below

# Create New RStudio Project

File \> New Project Select: Version Control, checkout a project from a version control repository. Select: Clone a project from a Git repository

In the dialogue box, paste the URL you copied from the github repository. Hit tab, Choose where you would like the project to go on your loca computer under 'Create project as subdirectory of:' Hit create project

Take a look at the "Files" tab. This tab lists all the files and folders in the project directory. You will now see that RStudio has added two files, in addition to downloading the existing files from the github repository.

-   `.gitignore file`: we will touch on this shortly when we go over version control
-   `.RProj file`: This file contains various project options. You can use this as a shortcut for opening the project directly from your file browser.

### Challenge 1 (5-minute)

1.  Set up your project skeleton by adding new folders according to the project directory template outlined above. Hint: Click on 'New Folder' to add folders.

2.  Download the datasets for today's workshop from here: <https://github.com/egouldo/VicBioCon17_data_wrangling>. They are called `bat_dat.csv` and `iris.csv` and are in the `./data/` directory. You can download them by: clicking on the filename for the relevant document within the folder view, when viewing each individual file within GitHub, right-click on the "raw" button, and select "save target as", "download file as", etc (specific option will depend on your computer's operating system). ![download_data](../assets/download_data.png)

3.  Save it to the appropriate folder in your project.

### References:

[nice R code guide](https://nicercode.github.io/blog/2013-04-05-projects/)

[Another way of organising the project directory: http://www.carlboettiger.info/2012/05/06/research-workflow.html](http://www.carlboettiger.info/2012/05/06/research-workflow.html)

Gandrud, C. (2016) Reproducible Research with R and R Studio, Second Edition. CRC Press.

White, E., Baldridge, E., Brym, Z., Locey, K., McGlinn, D., Supp, S. (2013) Nine simple ways to make it easier to (re)use your data. IEE. 6, 1--10.

Noble, W. S. (2009) A Quick Guide to Organizing Computational Biology Projects (ed F. Lewitter). PLoS Comp Biol. 5, e1000424.
